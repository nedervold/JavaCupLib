<project name="JavaCupLib" default="test" basedir=".">
  <property name="JavaCupLib-std" value="JavaCupLib-std" /> 
  <!-- <property name="JavaCupLib-std" value="java-cup-11b" /> -->
  <property name="target" location="target" />
  <property name="test" location="src/test" />
  <property name="cupfiles" location="${test}/resources/cupfiles" />

  <target name="init"
	  description="creates needed directories">
    <mkdir dir="${target}"/>
    <mkdir dir="${target}/classes"/>
    <mkdir dir="${target}/test-classes"/>
  </target>


  <target name="synth"
	  description="synthesize the lexer and parser code" >
    <!-- In the future, we'll synthesize them only when necessary; 
	 for now, it's every time. -->
    <!-- TODO Lexer -->

    <!-- Synthesize the parser code -->
    <java
       jar="src/test/resources/JavaCupLib-std.jar"
       dir="src/main/java/java_cup"
       fork="true">
      <arg value="-interface"/>
      <arg value="../../../../cup/parser.cup"/>
      </java>
  </target>

  <target name="compile"
	  depends="init, synth"
	  description="compiles the source code">
    <javac srcdir="src/main/java"
	   destdir="target/classes"
	   excludes="java_cup/anttask/*.java,java_cup/runtime/*.java"
	   includeantruntime="false" />
  </target>

  <target name="jar"
	  depends="compile"
	  description="bundles up the compiled source classes into a jar">
    <jar basedir="target/classes"
	 destfile="target/JavaCupLib.jar">
      <manifest>
	<attribute name="Main-Class" value="java_cup.Main" />
      </manifest>
    </jar>
  </target>

  <target name="compileTest"
	  description="compiles the test code">
    <javac srcdir="${test}/java" 
	   destdir="${target}/test-classes"
	   includeantruntime="false" />
  </target>

  <macrodef name="runJavaCup"
	    description="processes a CUP file with a JavaCUP executable">
    <attribute name="jar"
	       description="the jarfile JavaCUP lives in"/>
    <attribute name="workingDir"
	       description="the working directory"/>
    <attribute name="cupFile"
	       description="the CUP file to process"/>
    <sequential>

      <!-- Runs JavaCUP in the given directory, capturing the output
	   streams into files and the statusCode into a property. -->
      <local name="statusCode" />
      <java
	 jar="@{jar}"
	 dir="@{workingDir}"
	 output="@{workingDir}/stdOutput"
	 error="@{workingDir}/stdError"
	 resultproperty="statusCode"
	 fork="true">
	<arg value="-dump" />
	<arg value="@{cupFile}" />
      </java>
      
      <!-- Now save the statusCode into the filesystem too. -->
      <echo file="@{workingDir}/statusCode" 
	    message="statusCode = ${statusCode}" />

    </sequential>
  </macrodef>

  <macrodef name="testCupFile"
	    description="tests a JavaCUP executable against a standard executable">
    <attribute name="name"
	       description="name of the CUP file (without extension) to test"/>
    <attribute name="failPropName"
	       description="name of a property set if the test fails" />
    <sequential>

      <!-- Create st(andar)d and gen(erated) directories. -->
      <mkdir dir="${target}/@{name}" />
      <mkdir dir="${target}/@{name}/std" />
      <mkdir dir="${target}/@{name}/gen" />
      <copy todir="${target}/@{name}/std" file="${cupfiles}/@{name}.cup" />
      <copy todir="${target}/@{name}/gen" file="${cupfiles}/@{name}.cup" />

      <!-- Run the standard JavaCUP executable in std and the newly
	   built one in gen. -->

      <runJavaCup jar="${test}/resources/${JavaCupLib-std}.jar" 
		  workingDir="${target}/@{name}/std"
		  cupFile="@{name}.cup" />
      <runJavaCup jar="target/JavaCupLib.jar"
		  workingDir="${target}/@{name}/gen"
		  cupFile="@{name}.cup" />

      <!-- Now compare the contents of the two directories. -->

      <local name="statusCode" />
      <java
	 dir="${target}/@{name}"
	 classname="CompareDirectories"
	 classpath="${target}/test-classes"
	 resultproperty="statusCode"
	 failonerror="false"
	 fork="true">
	<arg value="std"/>
	<arg value="gen"/>
      </java>

      <!-- sets a failure property if the comparision fails -->
      <condition property="@{failPropName}" value="@{name}" >
	<not>
	  <equals arg1="0" arg2="${statusCode}" />
	</not>
      </condition>
    </sequential>
  </macrodef>

  <target name="test" depends="init, compileTest, jar"
	  description="tests the JavaCUP executable using various CUP files">
    <testCupFile name="example" failPropName="testsFailed" />
    <testCupFile name="lisp" failPropName="testsFailed" />
    <testCupFile name="pascal" failPropName="testsFailed" />
    <testCupFile name="parser" failPropName="testsFailed" />
    <testCupFile name="pattern" failPropName="testsFailed" />
    <testCupFile name="troff2html" failPropName="testsFailed" />
    
    <!-- Did any of the tests fail?  -->
    <fail message="JavaCUP test '${testsFailed}' failed (and maybe others)."
	  if="testsFailed"/>

  </target>

  <target name="clean">
    <delete dir="${target}" />
  </target>

</project>
