To remove globals (statics):

  * Added an instance() call.

  * Changed protected to private, or public if necessary.  Since this
    is a one-package project with little inheritance, protected
    essentially means public.  I reduced access to private whenever
    possible to see what's calling what.

  * Renamed all the public static calls, so other classes are calling
    the new name.  Duplicate each of them with the old name and
    reimplement the new call to call the old one through instance().

 * Inline all the new calls.

 * Make public static variables non-static.  Once non-static,
   encapsulate the variables.

 * Extract an interface so we can talk to that.

 * Separate the access (instance()) from the data.

 * Refactor the access call into a variable (assuming it won't change
   in the middle of calculations).  This makes the code look much more
   like the original.

------------------------------------------------------------

Refactoring steps taken

* Removed globals from emit, with the interface as Emitter, the
  singleton access as EmitterAccess and the original implementation as
  cup_emit.

* Added an AbstractEmitter class to hold the variables and their
  getter/setters.

* Created a NullEmitter that does nothing.

* Found that with a NullEmitter, the parser.java and sym.java files
  are still created; this was happening in Main.  Moved Main's
  open_files(), part of close_files() and emit_parser() into cup_emit.
  Now setting a NullEmitter means no code files at all.

* Removing globals from terminal, non_terminal, production (and
  action_production), and lalr_state by moving into Factories.

* Added generic arguments to old-style collections.

* Separated singleton access from ErrorManager into
  ErrorManagerAccess.

* Removed globals from all the Factories.  The Factories are then
  created in Main and passed around.

* Removed globals from Main.

* Broke the Options out from Main.

* Replaced generic calls in IErrorManager with specific calls, so
  different implementations can handle or not on the basis of content,
  not warning level.

------------------------------------------------------------

TODO:

* The pascal specification has one conflict and needs to be run with
  expect to succeed.  Allow passing flags into runJavaCup.  Perhaps
  keep it as is, too, to demo a failing run.

------------------------------------------------------------

NOTES:

* The results are sensitive enough on the inputs (and calculations)
  that the minimal test suite seems to be sufficient.  Even small
  changes (like the order in which productions are created) create
  test failures.

* When there are multiple constructors that call each other, using
  Eclipse's "Introduce Factory..." call doesn't work quite right for
  refactoring.  You end up with multiple createXxx() calls that call
  the multiple constructors, but what you really need is multiple
  factory methods that call *each other* in the same way the
  constructors called each other.

